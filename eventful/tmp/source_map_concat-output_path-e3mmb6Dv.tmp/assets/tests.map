{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","eventful/tests/app.lint-test.js","eventful/tests/helpers/destroy-app.js","eventful/tests/helpers/module-for-acceptance.js","eventful/tests/helpers/resolver.js","eventful/tests/helpers/start-app.js","eventful/tests/integration/components/reddit-post-test.js","eventful/tests/integration/components/vote-control-test.js","eventful/tests/integration/helpers/relative-time-test.js","eventful/tests/test-helper.js","eventful/tests/tests.lint-test.js","eventful/tests/unit/controllers/application-test.js","eventful/tests/unit/controllers/search-test.js","eventful/tests/unit/routes/error-test.js","eventful/tests/unit/routes/loading-test.js","eventful/tests/unit/routes/search-test.js","eventful/tests/unit/services/reddit-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('eventful/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/reddit-post.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/reddit-post.js should pass ESLint\\n\\n6:11 - \\'post\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/vote-control.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/vote-control.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/search.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/search.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/relative-time.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/relative-time.js should pass ESLint\\n\\n7:3 - Unreachable code. (no-unreachable)');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/loading.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/loading.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/search.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/search.js should pass ESLint\\n\\n2:8 - \\'$\\' is defined but never used. (no-unused-vars)\\n20:4 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/reddit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/reddit.js should pass ESLint\\n\\n');\n  });\n});","define('eventful/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('eventful/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'eventful/tests/helpers/start-app', 'eventful/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('eventful/tests/helpers/resolver', ['exports', 'eventful/resolver', 'eventful/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('eventful/tests/helpers/start-app', ['exports', 'eventful/app', 'eventful/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('eventful/tests/integration/components/reddit-post-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('reddit-post', 'Integration | Component | reddit post', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yO0Nc4bZ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"reddit-post\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mtoRldVO\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"reddit-post\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('eventful/tests/integration/components/vote-control-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('vote-control', 'Integration | Component | vote control', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CJOD1RjW\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"vote-control\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mo9y8fQK\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"vote-control\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('eventful/tests/integration/helpers/relative-time-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('relative-time', 'helper:relative-time', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"uO6dQ7fK\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"relative-time\\\",[[19,0,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('eventful/tests/test-helper', ['eventful/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('eventful/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/reddit-post-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/reddit-post-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/vote-control-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/vote-control-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/relative-time-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/relative-time-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/search-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/search-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/error-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/error-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/loading-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/loading-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/search-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/search-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/reddit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/reddit-test.js should pass ESLint\\n\\n');\n  });\n});","define('eventful/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('eventful/tests/unit/controllers/search-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:search', 'Unit | Controller | search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('eventful/tests/unit/routes/error-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:error', 'Unit | Route | error', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('eventful/tests/unit/routes/loading-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:loading', 'Unit | Route | loading', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('eventful/tests/unit/routes/search-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:search', 'Unit | Route | search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('eventful/tests/unit/services/reddit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:reddit', 'Unit | Service | reddit', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('eventful/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;","file":"tests.js"}